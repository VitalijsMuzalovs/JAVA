https://www.bestprog.net/ru/2019/07/14/java-exceptions-operators-throw-throws-examples-ru/

http://developer.alexanderklimov.ru/android/java/exception.php

/#############

Во-первых, есть два ключевых слова throw и throws. Они используются по разному и я о них поговорю чуть ниже.

Но сначала разберемся зачем нужны механизмы обработки исключений вообще.

Может возникнуть резонный вопрос, "почему бы не отреагировать на ошибку сразу как она возникла?" Зачем вообще нужно "бросать" исключение, чтобы потом его где-то "ловить" и обрабатывать?

Ответ на это такой: далеко не всегда часть программы, в которой случилась ошибка, знает, как на нее правильно отреагировать.

Например, программа для чата по сети (типа skype или telegram) может использовать системную функция send, которая собственно посылает сообщение по сети. Как работает эта функция нас как ее пользователей не особо интересует. Теперь представьте, что во время посылки сообщения, компьютер-адресат выключился (грубо говоря пропало электричество). Функция send определит, что невозможно послать сообщение и вот у нас возникла ошибка.

Теперь встает вопрос, что с этой ошибкой делать. Сама функция не знает, что с ней делать. Эту функцию писали совсем другие люди, они не знают в какой программе ее собираются использовать. Например, функция не может просто показать сообщение об ошибке на экран пользователю, потому, что возможно она используется в программе запущеной на сервере, где и экрана то нету, да и пользователя может не быть, так как это серверная программа, которая запустилась по расписанию, чтобы загрузить в базу данных, скажем, информацию о новых курсах валют из интернета.

Итак, получается. что сама функция send знает, что случилась ошибка, но не знает, что с ней делать. А кто же знает? А знает клиент этой функции, т.е. программа, которая вызвала функцию send. Она то точно знает, что делать. Например, показать пользователю сообщение "Не удалось отослать сообщение" и кнопку "попробовать еще раз", если это программа чата. Или если это была серверная программа, которая загружает курсы валют в базу данных, то она может послать письмо администратору и запланировать повторное выполнение загрузки скажем через час.

Вот мы и подошли к throw. Этот оператор как раз и нужен, чтобы send могла сообщить вызывающей программе об ошибке, т.е. "бросить" (или по другому "возбудить") исключение в функции типа send (т.е. той, которая знает об ошибке, но не знает, что нужно делать, если ошибка возникла).

send будет схематично выглядеть так:

void send(String data) {
  if (connectToTarget()) {
      // тут реализация собственно посылки по сети
  } else {
      throw new CannotConnectException("Cannot connect to target server");
  }
}
Теперь, что касается throws. Вопрос зачем это ключевое слово нужно довольно непростой. Тут я упрощенно описываю, чтобы было понятнее. А вообще есть много нюансов, которых я тут не касаюсь (смотрите многочисленные темы по поводу checked vs unchecked exceptions).

Так вот, ключевое слово throws указывается в определении (сигнатуре) функции и оно говорит о том, что функция может бросить такое исключение. Например, для send будет так:

void send(String data) throws CannotConnectException {
 ...
}
При этом, когда вы такуя функция вызываете, то либо должны это исключение обработать, т.е. завернуть вызов send в блок try/catch, либо (в случае если вызывающая функция тоже не знает, как обработать исключение) тоже объявить в своей сигнатуре, что она может бросить данное исключение.

Тут важный момент, что эта необходимость обработать или объявить контролируется еще на этапе компиляции, т.е. до того как программа будет запущена.

Задумка авторов языка была такая, чтобы пользователи функции, не забывали обрабатывать исключения, и компилятор об этом напоминал и даже не позволял компилировать (и запускать) такую программу.